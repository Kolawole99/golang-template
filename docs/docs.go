// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/forgot-password": {
            "post": {
                "description": "This disables an already registered user password. It generates a token and send to the email of the account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "This resets a user password",
                "responses": {}
            }
        },
        "/auth/login": {
            "post": {
                "description": "This Authenticates an already registered user. It validates the email, password and generates a JWT token along side",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "This Authenticates a user",
                "responses": {}
            }
        },
        "/auth/register": {
            "post": {
                "description": "This method handles a User creation payload and creates a not already registered user. It validates the email, password and generates a JWT token along side",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "This creates a new user",
                "responses": {}
            }
        },
        "/auth/reset-password": {
            "post": {
                "description": "This updates an already registered user password. It generates a token and logs them into the account afresh",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "This changes a user password",
                "responses": {}
            }
        },
        "/books/all": {
            "get": {
                "description": "This returns all books. It validates that the user is authenticated and return a list of books",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "This returns all books",
                "responses": {}
            }
        },
        "/books/create": {
            "post": {
                "description": "This creates an book and associates it with the authenticated user. It validates the payload and stores the book in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "This creates a book",
                "responses": {}
            }
        },
        "/books/one/:id": {
            "get": {
                "description": "This returns a book that the id is specified in the query. It validates that the user is authenticated and return the corresponding id book",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "This returns a book",
                "responses": {}
            }
        },
        "/books/remove/:id": {
            "delete": {
                "description": "This deletes a book details. It validates the id and deletes the book from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "This deletes a book",
                "responses": {}
            }
        },
        "/books/update": {
            "put": {
                "description": "This updates a book details. It validates the payload and stores the book in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "This updates a book",
                "responses": {}
            }
        },
        "/health": {
            "get": {
                "description": "This ping route enables us verify the health status and availability of the server.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health Check"
                ],
                "summary": "Shows the health status of server.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/profile": {
            "get": {
                "description": "This returns an already existing user. It validates the authenticated user matches the token and returns their details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "This returns a user profile",
                "responses": {}
            }
        },
        "/users/update": {
            "put": {
                "description": "This updates an already existing user. It validates the details of the user matches the authenticated user and then updates the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "This updates a user",
                "responses": {}
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "Sample MicroService API built with Go + Gin",
	Description:      "This is a server implementation of the microservice.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
